{"version":3,"sources":["imgs/home-icon.png","imgs/trending-icon.png","imgs/subs.png","imgs/liked-icon.png","imgs/historic.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","titulo","reproduzVideo","alert","class","type","placeholder","id","className","src","homeIcon","fireIcon","subsIcon","likedIcon","histoIcon","onClick","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,+OCwF5BC,MAhFf,WACE,IAAMC,EAAS,wBAEf,SAASC,IACPC,MAAM,wCAGR,OACE,yBAAKC,MAAM,gBACX,gCACI,wCACA,2BAAOC,KAAK,OAAOC,YAAY,QAAQC,GAAG,kBAG9C,8BACI,yBAAKC,UAAU,iBACX,4BACI,wBAAIA,UAAU,yBACZ,yBAAKA,UAAU,YAAYC,IAAKC,MADlC,aAIA,wBAAIF,UAAU,yBACd,yBAAKA,UAAU,YAAYC,IAAKE,MADhC,WAIA,wBAAIH,UAAU,yBACd,yBAAKA,UAAU,YAAYC,IAAKG,MADhC,oBAIA,6BACA,wBAAIJ,UAAU,yBACd,yBAAKA,UAAU,YAAYC,IAAKI,MADhC,YAIA,wBAAIL,UAAU,yBACd,yBAAKA,UAAU,YAAYC,IAAKK,MADhC,kBAOR,6BAASN,UAAU,oBACf,yBAAKA,UAAU,8BAA8BO,QAASb,GAClD,yBAAKO,IAAI,qCAAqCO,IAAI,KAClD,4BAAKf,IAET,yBAAKO,UAAU,8BAA8BO,QAASb,GAClD,yBAAKO,IAAI,qCAAqCO,IAAI,KAClD,4BAAKf,IAET,yBAAKO,UAAU,8BAA8BO,QAASb,GAClD,yBAAKO,IAAI,qCAAqCO,IAAI,KAClD,4BAAKf,IAET,yBAAKO,UAAU,8BAA8BO,QAASb,GAClD,yBAAKO,IAAI,qCAAqCO,IAAI,KAClD,4BAAKf,IAET,yBAAKO,UAAU,8BAA8BO,QAASb,GAClD,yBAAKO,IAAI,qCAAqCO,IAAI,KAClD,sDAEJ,yBAAKR,UAAU,8BAA8BO,QAASb,GAClD,yBAAKO,IAAI,qCAAqCO,IAAI,KAClD,4BAAKf,IAET,yBAAKO,UAAU,8BAA8BO,QAASb,GAClD,yBAAKO,IAAI,qCAAqCO,IAAI,KAClD,4BAAKf,EAAL,MAEJ,yBAAKO,UAAU,8BAA8BO,QAASb,GAClD,yBAAKO,IAAI,qCAAqCO,IAAI,KAClD,4BAAKf,QCpEDgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4008def7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home-icon.703f5ca2.png\";","module.exports = __webpack_public_path__ + \"static/media/trending-icon.dfd80ba1.png\";","module.exports = __webpack_public_path__ + \"static/media/subs.6ac49bcb.png\";","module.exports = __webpack_public_path__ + \"static/media/liked-icon.ad84eda2.png\";","module.exports = __webpack_public_path__ + \"static/media/historic.112411af.png\";","import React from 'react';\nimport './App.css';\nimport homeIcon from './imgs/home-icon.png';\nimport fireIcon from './imgs/trending-icon.png'\nimport subsIcon from './imgs/subs.png'\nimport likedIcon from './imgs/liked-icon.png'\nimport histoIcon from './imgs/historic.png'\n\nfunction App() {\n  const titulo = \"Título do vídeo\"\n\n  function reproduzVideo() {\n    alert(\"O vídeo está sendo reproduzido\")\n  }\n\n  return (\n    <div class=\"tela-inteira\">\n    <header>\n        <h1>Lab Tube</h1>\n        <input type=\"text\" placeholder=\"Busca\" id=\"campoDeBusca\" />\n    </header>\n\n    <main>\n        <nav className=\"menu-vertical\">\n            <ul>\n                <li className=\"botoes-meunu-vertical\">\n                  <img className=\"nav-icons\" src={homeIcon} />\n                  Início\n                  </li>\n                <li className=\"botoes-meunu-vertical\">\n                <img className=\"nav-icons\" src={fireIcon} />\n                Em alta\n                </li>\n                <li className=\"botoes-meunu-vertical\">\n                <img className=\"nav-icons\" src={subsIcon} />\n                Inscrições\n                </li>\n                <hr />\n                <li className=\"botoes-meunu-vertical\">\n                <img className=\"nav-icons\" src={likedIcon} />\n                  Curtidos\n                  </li>\n                <li className=\"botoes-meunu-vertical\">\n                <img className=\"nav-icons\" src={histoIcon} />\n                  Histórico\n                  </li>\n            </ul>\n        </nav>\n        \n        <section className=\"painel-de-videos\">\n            <div className=\"box-pagina-principal media1\" onClick={reproduzVideo}>\n                <img src=\"https://picsum.photos/400/400?a=1 \" alt=\"\" />\n                <h4>{titulo}</h4>\n            </div>\n            <div className=\"box-pagina-principal media2\" onClick={reproduzVideo}>\n                <img src=\"https://picsum.photos/400/400?a=2 \" alt=\"\" />\n                <h4>{titulo}</h4>\n            </div>\n            <div className=\"box-pagina-principal media3\" onClick={reproduzVideo}>\n                <img src=\"https://picsum.photos/400/400?a=3 \" alt=\"\" />\n                <h4>{titulo}</h4>\n            </div>\n            <div className=\"box-pagina-principal media4\" onClick={reproduzVideo}>\n                <img src=\"https://picsum.photos/400/400?a=4 \" alt=\"\" />\n                <h4>{titulo}</h4>\n            </div>\n            <div className=\"box-pagina-principal media5\" onClick={reproduzVideo}>\n                <img src=\"https://picsum.photos/400/400?a=5 \" alt=\"\" />\n                <h4>Título do vídeo</h4>\n            </div>\n            <div className=\"box-pagina-principal media6\" onClick={reproduzVideo}>\n                <img src=\"https://picsum.photos/400/400?a=6 \" alt=\"\" />\n                <h4>{titulo}</h4>\n            </div>\n            <div className=\"box-pagina-principal media7\" onClick={reproduzVideo}>\n                <img src=\"https://picsum.photos/400/400?a=7 \" alt=\"\" />\n                <h4>{titulo}></h4>\n            </div>\n            <div className=\"box-pagina-principal media8\" onClick={reproduzVideo}>\n                <img src=\"https://picsum.photos/400/400?a=8 \" alt=\"\" />\n                <h4>{titulo}</h4>\n            </div>\n        </section>\n    </main>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}